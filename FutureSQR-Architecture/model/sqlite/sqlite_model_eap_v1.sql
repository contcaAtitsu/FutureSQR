/* ---------------------------------------------------- */
/*  Generated by Enterprise Architect Version 13.0 		*/
/*  Created On : 25-Jun-2023 15:23:54 				*/
/*  DBMS       : SQLite 								*/
/* ---------------------------------------------------- */

/* Drop Tables */

DROP TABLE IF EXISTS 'CodeRelatedDiscussions'
;

DROP TABLE IF EXISTS 'CodeReviewDiscussions'
;

DROP TABLE IF EXISTS 'CodeReviews'
;

DROP TABLE IF EXISTS 'CodeReviewScmRevisions'
;

DROP TABLE IF EXISTS 'DiscussionThread'
;

DROP TABLE IF EXISTS 'ScmConfigurations'
;

DROP TABLE IF EXISTS 'ScmRevisions'
;

DROP TABLE IF EXISTS 'ScmUserAliases'
;

DROP TABLE IF EXISTS 'StarredProjects'
;

DROP TABLE IF EXISTS 'SystemUsers'
;

/* Create Tables with Primary and Foreign Keys, Check and Unique Constraints */

-- Attention: This is not yet implemented.  Code related discussions, are discussions, which are first introduced in a review, but are not completed or marked as resolved. Therefore we want to keep this code reference   The code position which should be selected should be the earliest one, where this change is made. Such that the introduction of this error can be addressed. But t can only be a revision which is part of the review.  A code related discussion can be part of multiple reviews, e.g. because it was commented on in aprticular review or because it was marked as resolved in a later review.  Keeping track of the code line and the code reference is non trivial....  Therefore we just add this table here for proper future use.
CREATE TABLE 'CodeRelatedDiscussions'
(
	'threadUuid' TEXT NOT NULL,
	CONSTRAINT 'FK_CodeRelatedDiscussions_DiscussionThread' FOREIGN KEY ('threadUuid') REFERENCES 'DiscussionThread' ('uuid') ON DELETE No Action ON UPDATE No Action
)
;

CREATE TABLE 'CodeReviewDiscussions'
(
	'reviewUuid' TEXT NOT NULL,
	'threadUuid' TEXT NOT NULL,
	'created' NUMERIC NOT NULL,
	CONSTRAINT 'FK_CodeReviewDiscussions_CodeReviews' FOREIGN KEY ('reviewUuid') REFERENCES 'CodeReviews' ('reviewUuid') ON DELETE No Action ON UPDATE No Action,
	CONSTRAINT 'FK_CodeReviewDiscussions_DiscussionThread' FOREIGN KEY ('threadUuid') REFERENCES 'DiscussionThread' ('uuid') ON DELETE No Action ON UPDATE No Action
)
;

CREATE TABLE 'CodeReviews'
(
	'reviewUuid' TEXT NOT NULL PRIMARY KEY,
	'projectId' TEXT NOT NULL,
	'projectBranch' TEXT NOT NULL,
	'state' INTEGER NOT NULL,
	'reviewId' TEXT NOT NULL,
	'reviewData' TEXT NOT NULL, -- reviewData is the gson serialized FSqrCodeReview object - just get it done.... for now. we will invest
	CONSTRAINT 'FK_CodeReviews_ScmConfigurations' FOREIGN KEY ('projectId') REFERENCES 'ScmConfigurations' ('projectId') ON DELETE No Action ON UPDATE No Action
)
;

-- This table contains the linking information of the code review to the scm revision id.
CREATE TABLE 'CodeReviewScmRevisions'
(
	'reviewUuid' TEXT NOT NULL,
	'scmRevisionId' TEXT NOT NULL, -- This is the identifier within a scm project (e.g. revision hash code or revision number)
	CONSTRAINT 'FK_CodeReviewScmRevisions_CodeReviews' FOREIGN KEY ('reviewUuid') REFERENCES 'CodeReviews' ('reviewUuid') ON DELETE No Action ON UPDATE No Action
)
;

-- A discussion thread holds all messages which are related to one single thread. A code review can have many discussion threads, because each thread is related to one topic either in the review itself or related to the code.
CREATE TABLE 'DiscussionThread'
(
	'uuid' TEXT NOT NULL PRIMARY KEY,
	'threadData' TEXT NOT NULL -- right now the thread object is simply serialized and stored in this text field. Later we will do a more sophisticated approacgh, but for now this is good enough to move forward with the implementation and the current feature set.
)
;

CREATE TABLE 'ScmConfigurations'
(
	'projectId' TEXT NOT NULL PRIMARY KEY,
	'scmConfigData' TEXT NOT NULL
)
;

-- Attention this is Not Yet Implemented - NYI  This should be the table were we get the scm revision information from.   This table should be referenced by CodeReviewScmRevisions.  * we will crawl and index many of the * UUID * scmRevisionId * projectId,(FK to ScmConfiguration) * Commit info... etc.  see FSqrRevision-Type * 
CREATE TABLE 'ScmRevisions'
(
	'scmRevisionUid' TEXT NOT NULL PRIMARY KEY,
	'scmRevisionId' TEXT NOT NULL,
	'projectId' TEXT NOT NULL
)
;

CREATE TABLE 'ScmUserAliases'
(
	'userUuid' TEXT NOT NULL,
	'aliasName' TEXT NOT NULL,
	CONSTRAINT 'FK_ScmUserAliases_SystemUsers' FOREIGN KEY ('userUuid') REFERENCES 'SystemUsers' ('uuid') ON DELETE No Action ON UPDATE No Action
)
;

CREATE TABLE 'StarredProjects'
(
	'userUuid' TEXT NOT NULL,
	'projectId' TEXT NOT NULL,
	'whenStarred' NUMERIC NOT NULL,
	CONSTRAINT 'FK_StarredProjects_ScmConfigurations' FOREIGN KEY ('projectId') REFERENCES 'ScmConfigurations' ('projectId') ON DELETE No Action ON UPDATE No Action,
	CONSTRAINT 'FK_StarredProjects_SystemUsers' FOREIGN KEY ('userUuid') REFERENCES 'SystemUsers' ('uuid') ON DELETE No Action ON UPDATE No Action
)
;

CREATE TABLE 'SystemUsers'
(
	'uuid' TEXT NOT NULL PRIMARY KEY,
	'userLoginName' TEXT NOT NULL,
	'userDisplayName' TEXT NOT NULL,
	'userEmail' TEXT NOT NULL,
	'avatarLocation' TEXT NOT NULL,
	'isBanned' INTEGER NULL
)
;

/* Create Indexes and Triggers */

CREATE INDEX 'IXFK_CodeRelatedDiscussions_DiscussionThread'
 ON 'CodeRelatedDiscussions' ('threadUuid' ASC)
;

CREATE INDEX 'IXFK_CodeReviewDiscussions_CodeReviews'
 ON 'CodeReviewDiscussions' ('reviewUuid' ASC)
;

CREATE INDEX 'IXFK_CodeReviewDiscussions_DiscussionThread'
 ON 'CodeReviewDiscussions' ('threadUuid' ASC)
;

CREATE INDEX 'IXFK_CodeReviews_ScmConfigurations'
 ON 'CodeReviews' ('projectId' ASC)
;

CREATE INDEX 'IXFK_CodeReviewScmRevisions_CodeReviews'
 ON 'CodeReviewScmRevisions' ('reviewUuid' ASC)
;

CREATE INDEX 'IXFK_ScmUserAliases_SystemUsers'
 ON 'ScmUserAliases' ('userUuid' ASC)
;

CREATE INDEX 'IXFK_StarredProjects_ScmConfigurations'
 ON 'StarredProjects' ('projectId' ASC)
;

CREATE INDEX 'IXFK_StarredProjects_SystemUsers'
 ON 'StarredProjects' ('userUuid' ASC)
;
